{"name": "手机号码超过11位提示手机号不正确", "status": "broken", "statusDetails": {"message": "httprunner.exceptions.ValidationFailure: assert body.msg equal 请输入正确的手机号码(str)\t==> fail\ncheck_item: body.msg\ncheck_value: 地址超出上限,请删除不使用地址,在进行添加(str)\nassert_method: equal\nexpect_value: 请输入正确的手机号码(str)", "trace": "self = <testcases.T4_addr_test.TestCaseT4Addr object at 0x03F3C070>\nparam = {'addr': '详细地址', 'addrtag': '地址标签', 'city': '116050', 'default': '1', ...}\n\n    @pytest.mark.parametrize(\n        \"param\",\n        Parameters(\n            {\n                \"name-phone-city-addr-addrtag-default-msg-title\": \"${parameterize(data/addr.csv)}\"\n            }\n        ),\n    )\n    def test_start(self, param):\n>       super().test_start(param)\n\nT4_addr_test.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nc:\\users\\administrator.pc-20191019zndu.001\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\httprunner\\runner.py:456: in test_start\n    TestCase(config=self.__config, teststeps=self.__teststeps)\nc:\\users\\administrator.pc-20191019zndu.001\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\httprunner\\runner.py:357: in run_testcase\n    extract_mapping = self.__run_step(step)\nc:\\users\\administrator.pc-20191019zndu.001\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\httprunner\\runner.py:295: in __run_step\n    step_data = self.__run_step_request(step)\nc:\\users\\administrator.pc-20191019zndu.001\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\httprunner\\runner.py:209: in __run_step_request\n    validators, variables_mapping, self.__project_meta.functions\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <httprunner.response.ResponseObject object at 0x03F231F0>\nvalidators = [{'equal': ['body.msg', '$msg', '']}]\nvariables_mapping = {'addr': '详细地址', 'addrtag': '地址标签', 'city': '116050', 'default': '1', ...}\nfunctions_mapping = {'get_httprunner_version': <function get_httprunner_version at 0x03B93810>, 'sleep': <function sleep at 0x03B93780>, 'sum_two': <function sum_two at 0x03B93738>}\n\n    def validate(\n        self,\n        validators: Validators,\n        variables_mapping: VariablesMapping = None,\n        functions_mapping: FunctionsMapping = None,\n    ) -> NoReturn:\n    \n        variables_mapping = variables_mapping or {}\n        functions_mapping = functions_mapping or {}\n    \n        self.validation_results = {}\n        if not validators:\n            return\n    \n        validate_pass = True\n        failures = []\n    \n        for v in validators:\n    \n            if \"validate_extractor\" not in self.validation_results:\n                self.validation_results[\"validate_extractor\"] = []\n    \n            u_validator = uniform_validator(v)\n    \n            # check item\n            check_item = u_validator[\"check\"]\n            if \"$\" in check_item:\n                # check_item is variable or function\n                check_item = parse_data(\n                    check_item, variables_mapping, functions_mapping\n                )\n                check_item = parse_string_value(check_item)\n    \n            if check_item and isinstance(check_item, Text):\n                check_value = self._search_jmespath(check_item)\n            else:\n                # variable or function evaluation result is \"\" or not text\n                check_value = check_item\n    \n            # comparator\n            assert_method = u_validator[\"assert\"]\n            assert_func = get_mapping_function(assert_method, functions_mapping)\n    \n            # expect item\n            expect_item = u_validator[\"expect\"]\n            # parse expected value with config/teststep/extracted variables\n            expect_value = parse_data(expect_item, variables_mapping, functions_mapping)\n    \n            # message\n            message = u_validator[\"message\"]\n            # parse message with config/teststep/extracted variables\n            message = parse_data(message, variables_mapping, functions_mapping)\n    \n            validate_msg = f\"assert {check_item} {assert_method} {expect_value}({type(expect_value).__name__})\"\n    \n            validator_dict = {\n                \"comparator\": assert_method,\n                \"check\": check_item,\n                \"check_value\": check_value,\n                \"expect\": expect_item,\n                \"expect_value\": expect_value,\n                \"message\": message,\n            }\n    \n            try:\n                assert_func(check_value, expect_value, message)\n                validate_msg += \"\\t==> pass\"\n                logger.info(validate_msg)\n                validator_dict[\"check_result\"] = \"pass\"\n            except AssertionError as ex:\n                validate_pass = False\n                validator_dict[\"check_result\"] = \"fail\"\n                validate_msg += \"\\t==> fail\"\n                validate_msg += (\n                    f\"\\n\"\n                    f\"check_item: {check_item}\\n\"\n                    f\"check_value: {check_value}({type(check_value).__name__})\\n\"\n                    f\"assert_method: {assert_method}\\n\"\n                    f\"expect_value: {expect_value}({type(expect_value).__name__})\"\n                )\n                message = str(ex)\n                if message:\n                    validate_msg += f\"\\nmessage: {message}\"\n    \n                logger.error(validate_msg)\n                failures.append(validate_msg)\n    \n            self.validation_results[\"validate_extractor\"].append(validator_dict)\n    \n        if not validate_pass:\n            failures_string = \"\\n\".join([failure for failure in failures])\n>           raise ValidationFailure(failures_string)\nE           httprunner.exceptions.ValidationFailure: assert body.msg equal 请输入正确的手机号码(str)\t==> fail\nE           check_item: body.msg\nE           check_value: 地址超出上限,请删除不使用地址,在进行添加(str)\nE           assert_method: equal\nE           expect_value: 请输入正确的手机号码(str)\n\nc:\\users\\administrator.pc-20191019zndu.001\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\httprunner\\response.py:270: ValidationFailure"}, "description": "TestCase ID: 59c4242d-b168-48dd-a3c6-e3ac424b970c", "steps": [{"name": "step: 收货地址接口测试", "status": "broken", "statusDetails": {"message": "httprunner.exceptions.ValidationFailure: assert body.msg equal 请输入正确的手机号码(str)\t==> fail\ncheck_item: body.msg\ncheck_value: 地址超出上限,请删除不使用地址,在进行添加(str)\nassert_method: equal\nexpect_value: 请输入正确的手机号码(str)\n", "trace": "  File \"c:\\users\\administrator.pc-20191019zndu.001\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\httprunner\\runner.py\", line 357, in run_testcase\n    extract_mapping = self.__run_step(step)\n  File \"c:\\users\\administrator.pc-20191019zndu.001\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\httprunner\\runner.py\", line 295, in __run_step\n    step_data = self.__run_step_request(step)\n  File \"c:\\users\\administrator.pc-20191019zndu.001\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\httprunner\\runner.py\", line 209, in __run_step_request\n    validators, variables_mapping, self.__project_meta.functions\n  File \"c:\\users\\administrator.pc-20191019zndu.001\\appdata\\local\\programs\\python\\python37-32\\lib\\site-packages\\httprunner\\response.py\", line 270, in validate\n    raise ValidationFailure(failures_string)\n"}, "start": 1597914297348, "stop": 1597914297546}], "attachments": [{"name": "stderr", "source": "db92d4f4-71b8-43db-8ff8-561df5b4d2a6-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "param", "value": "{'name': '姓名超过十个字十个字十个字', 'phone': '1999999999999', 'city': '116050', 'addr': '详细地址', 'addrtag': '地址标签', 'default': '1', 'msg': '请输入正确的手机号码', 'title': '手机号码超过11位提示手机号不正确'}"}], "start": 1597914297343, "stop": 1597914297548, "uuid": "e14703d7-b78d-4e1c-b2bd-98c6907ac7ce", "historyId": "432932298cb6627ddc8f8cea6eca61d8", "testCaseId": "4d3c026e278f1cce17aacb8ed27c0bd1", "fullName": "testcases.T4_addr_test.TestCaseT4Addr#test_start", "labels": [{"name": "parentSuite", "value": "testcases"}, {"name": "suite", "value": "T4_addr_test"}, {"name": "subSuite", "value": "TestCaseT4Addr"}, {"name": "host", "value": "PC-20191019ZNDU"}, {"name": "thread", "value": "17792-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcases.T4_addr_test"}]}